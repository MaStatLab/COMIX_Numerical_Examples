rr = readRDS(paste0("./", tp,"/", f))
zeta_seq = c(zeta_seq, rr$zeta)
K_num = rbind(K_num, rr$K_num)
seed = c(seed, rr$seed)
})
}
}
oz = order(zeta_seq)
zeta_seq = zeta_seq[oz]
K_num = K_num[oz, ]
K_num
winner_idx = c(1, 2)
zeta_seq[winner_idx]
# Compute tsne and save:
if (make_tsne) {
library(Rtsne)
tt = list()
for (idx in winner_idx) {
print(paste0("zeta = ",zeta_seq[idx]))
rr = readRDS(paste0("./", tp, "/cal_flow_zeta_",
zeta_seq[idx],
".rds"))
tt[[idx]] = list(tsne = Rtsne(rr$Y_cal), zeta = zeta_seq[idx], idx = idx)
}
saveRDS(tt, "./tsne_favorite.rds")
tto = Rtsne(Y)
saveRDS(tto, "./tsne_raw.rds")
} else {
tt = readRDS("./tsne_favorite.rds")
tto = readRDS("./tsne_raw.rds")
}
# Plot some tsne and save:
nj = 10000
if (plot_tsne) {
n_row = length(winner_idx) + 1
J_seq = c(1,2,3)
n_col = length(J_seq)
jpeg(paste0("./Figure_8.jpg"), width=200 * n_col, height = 200 * n_row)
par(mfrow=c(n_row,n_col))
par(mar=c(0.2, 0.2, 0.2, 0.2))
par(oma=c(0, 0, 0, 3))
tt = readRDS("./tsne_favorite.rds")
for (j in J_seq) {
plot(tto$Y[((j - 1) * nj + 1):(j * nj), c(2, 1)],
xlim = rev(range(tto$Y[((j - 1) * nj + 1):(j * nj), 2])),
xaxt = "n", yaxt = "n",
asp = 1, pch = ".", xlab = "", ylab = "")
}
mtext("Raw Data",
side = 4, outer = FALSE, at = grconvertX(0.5,'npc','nic'),
line = 1.5, cex = 1.5)
for (idx in winner_idx) {
rr = readRDS(paste0("./",tp,"/cal_flow_zeta_",
zeta_seq[idx],
".rds"))
ust = unique(rr$sum_chain$t)
post_K = length(ust)
col_range = rainbow(post_K)
ord_lbl = numeric(post_K)
for (z in ust) {
ord_lbl[rr$sum_chain$t == z] = which(z == ust)
}
for (j in J_seq) {
plot(tt[[idx]]$tsne$Y[((j - 1) * nj + 1):(j * nj), ],
asp = 1, pch = ".", xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
col = col_range[ord_lbl[((j - 1) * nj + 1):(j * nj)]])
}
mtext(substitute(paste(zeta, " = ", zt), list(zt = zeta_seq[idx])),
side = 4, outer = FALSE, at = grconvertX(0.5,'npc','nic'),
line = 1.5, cex = 1.5)
}
dev.off()
}
if (plot_calibrated_batch_control) {
for (idx in 1:2) {
rr = readRDS(paste0("./",tp,"/cal_flow_zeta_",
zeta_seq[idx],
".rds"))
ust = unique(rr$sum_chain$t)
post_K = length(ust)
col_range = rainbow(post_K)
ord_lbl = numeric(post_K)
for (z in ust) {
ord_lbl[rr$sum_chain$t == z] = which(z == ust)
}
# Plot margins:
J = length(unique(C))
p = dim(rr$Y_cal)[2]
J_seq = c(1:J)
IDX2 = c(8,9,13)
for (calib_res in c(FALSE, TRUE)) {
for (idx1 in 1) {
if (calib_res) {
fname = paste0("./Figure_9_zeta", zeta_seq[idx], ".pdf")
title = substitute(paste("Calibrated Data, ", zeta, " = ", zt), list(zt = zeta_seq[idx]))
dt = rr$Y_cal
} else {
fname = "./Figure_9_raw.pdf"
title = "Raw Data"
dt = Y
}
pdf(file=fname,
width=2.5*length(J_seq), height=2.5*length(IDX2))
par(mfrow=c(length(IDX2),length(J_seq)))
par(mar=c(.2,.2,.2,.2))
par(oma=c(3, 3.5, 5, 0))
for (idx2 in IDX2) {
xlim = range(dt[,idx1])
ylim = range(dt[,idx2])
for (j in J_seq) {
if (calib_res) {
col = rgb(1, 0, 0, 0.4)
} else {
col = rgb(0, 0, 1, 0.4)
}
plot(dt[C==j,idx1],
dt[C==j,idx2],
pch=".",xlab="", ylab="",
xlim = xlim, ylim = ylim, xaxt = "n", yaxt = "n",
col = col)
if (j==1) {
mtext(colnames(Y)[idx2],
side = 2, outer = FALSE, line = 1, cex = 1.2)
}
if (idx2 == IDX2[length(IDX2)]) {
mtext(colnames(Y)[idx1], side = 1, outer = FALSE, line = 1, cex = 1.2)
}
if (idx2 == IDX2[1]) {
mtext(paste0("Sample #", j), side = 3, outer = FALSE, line = 0.8, cex = 1.2)
}
}
}
mtext(title, side = 3, outer = TRUE, line = 2.8, cex = 1.5)
dev.off()
}
}
}
}
# Plot margins:
a = readRDS("/home/hhh/projects/MPSK/MPSK_writeup/JASA_AandCS/Numerical_Examples/mass_cytometry/batch_control_data.rds")
colnames(a)
colnames(a$Y)
colnames(rr$Y_cal)
J = length(unique(C))
p = dim(rr$Y_cal)[2]
J_seq = c(1:J)
# IDX2 = c(8,9,13)
IDX2 = c(5,15,10)
for (calib_res in c(FALSE, TRUE)) {
for (idx1 in 6) {
if (calib_res) {
fname = paste0("./Figure_9_zeta", zeta_seq[idx], ".pdf")
title = substitute(paste("Calibrated Data, ", zeta, " = ", zt), list(zt = zeta_seq[idx]))
dt = rr$Y_cal
} else {
fname = "./Figure_9_raw.pdf"
title = "Raw Data"
dt = Y
}
pdf(file=fname,
width=2.5*length(J_seq), height=2.5*length(IDX2))
par(mfrow=c(length(IDX2),length(J_seq)))
par(mar=c(.2,.2,.2,.2))
par(oma=c(3, 3.5, 5, 0))
for (idx2 in IDX2) {
xlim = range(dt[,idx1])
ylim = range(dt[,idx2])
for (j in J_seq) {
if (calib_res) {
col = rgb(1, 0, 0, 0.4)
} else {
col = rgb(0, 0, 1, 0.4)
}
plot(dt[C==j,idx1],
dt[C==j,idx2],
pch=".",xlab="", ylab="",
xlim = xlim, ylim = ylim, xaxt = "n", yaxt = "n",
col = col)
if (j==1) {
mtext(colnames(Y)[idx2],
side = 2, outer = FALSE, line = 1, cex = 1.2)
}
if (idx2 == IDX2[length(IDX2)]) {
mtext(colnames(Y)[idx1], side = 1, outer = FALSE, line = 1, cex = 1.2)
}
if (idx2 == IDX2[1]) {
mtext(paste0("Sample #", j), side = 3, outer = FALSE, line = 0.8, cex = 1.2)
}
}
}
mtext(title, side = 3, outer = TRUE, line = 2.8, cex = 1.5)
dev.off()
}
}
zeta_seq
set.seed(123)
make_tsne = FALSE
plot_tsne = TRUE
plot_calibrated_batch_control = TRUE
if(!require(COMIX)){
devtools::install_github("MaStatLab/COMIX")
library(COMIX)
}
tps = c("batch_control_fit")
zeta_seq = NULL
K_num = NULL
seed = NULL
dt = readRDS(file = "./batch_control_data.rds")
Y = dt$Y
C = dt$C
for (tp in tps) {
fn = dir(paste0("./", tp))
fn = fn[grepl("zeta", fn)]
for (f in fn) {
try({
rr = readRDS(paste0("./", tp,"/", f))
zeta_seq = c(zeta_seq, rr$zeta)
K_num = rbind(K_num, rr$K_num)
seed = c(seed, rr$seed)
})
}
}
oz = order(zeta_seq)
zeta_seq = zeta_seq[oz]
K_num = K_num[oz, ]
winner_idx = c(1, 2)
zeta_seq[winner_idx]
# Compute tsne and save:
if (make_tsne) {
library(Rtsne)
tt = list()
for (idx in winner_idx) {
print(paste0("zeta = ",zeta_seq[idx]))
rr = readRDS(paste0("./", tp, "/cal_flow_zeta_",
zeta_seq[idx],
".rds"))
tt[[idx]] = list(tsne = Rtsne(rr$Y_cal), zeta = zeta_seq[idx], idx = idx)
}
saveRDS(tt, "./tsne_favorite.rds")
tto = Rtsne(Y)
saveRDS(tto, "./tsne_raw.rds")
} else {
tt = readRDS("./tsne_favorite.rds")
tto = readRDS("./tsne_raw.rds")
}
# Plot some tsne and save:
nj = 10000
if (plot_tsne) {
n_row = length(winner_idx) + 1
J_seq = c(1,2,3)
n_col = length(J_seq)
jpeg(paste0("./Figure_8.jpg"), width=200 * n_col, height = 200 * n_row)
par(mfrow=c(n_row,n_col))
par(mar=c(0.2, 0.2, 0.2, 0.2))
par(oma=c(0, 0, 0, 3))
tt = readRDS("./tsne_favorite.rds")
for (j in J_seq) {
plot(tto$Y[((j - 1) * nj + 1):(j * nj), c(2, 1)],
xlim = rev(range(tto$Y[((j - 1) * nj + 1):(j * nj), 2])),
xaxt = "n", yaxt = "n",
asp = 1, pch = ".", xlab = "", ylab = "")
}
mtext("Raw Data",
side = 4, outer = FALSE, at = grconvertX(0.5,'npc','nic'),
line = 1.5, cex = 1.5)
for (idx in winner_idx) {
rr = readRDS(paste0("./",tp,"/cal_flow_zeta_",
zeta_seq[idx],
".rds"))
ust = unique(rr$sum_chain$t)
post_K = length(ust)
col_range = rainbow(post_K)
ord_lbl = numeric(post_K)
for (z in ust) {
ord_lbl[rr$sum_chain$t == z] = which(z == ust)
}
for (j in J_seq) {
plot(tt[[idx]]$tsne$Y[((j - 1) * nj + 1):(j * nj), ],
asp = 1, pch = ".", xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
col = col_range[ord_lbl[((j - 1) * nj + 1):(j * nj)]])
}
mtext(substitute(paste(zeta, " = ", zt), list(zt = zeta_seq[idx])),
side = 4, outer = FALSE, at = grconvertX(0.5,'npc','nic'),
line = 1.5, cex = 1.5)
}
dev.off()
}
if (plot_calibrated_batch_control) {
for (idx in 1:2) {
rr = readRDS(paste0("./",tp,"/cal_flow_zeta_",
zeta_seq[idx],
".rds"))
ust = unique(rr$sum_chain$t)
post_K = length(ust)
col_range = rainbow(post_K)
ord_lbl = numeric(post_K)
for (z in ust) {
ord_lbl[rr$sum_chain$t == z] = which(z == ust)
}
# Plot margins:
J = length(unique(C))
p = dim(rr$Y_cal)[2]
J_seq = c(1:J)
IDX2 = c(5,15,10)
for (calib_res in c(FALSE, TRUE)) {
for (idx1 in 6) {
if (calib_res) {
fname = paste0("./Figure_9_zeta", zeta_seq[idx], ".pdf")
title = substitute(paste("Calibrated Data, ", zeta, " = ", zt), list(zt = zeta_seq[idx]))
dt = rr$Y_cal
} else {
fname = "./Figure_9_raw.pdf"
title = "Raw Data"
dt = Y
}
pdf(file=fname,
width=2.5*length(J_seq), height=2.5*length(IDX2))
par(mfrow=c(length(IDX2),length(J_seq)))
par(mar=c(.2,.2,.2,.2))
par(oma=c(3, 3.5, 5, 0))
for (idx2 in IDX2) {
xlim = range(dt[,idx1])
ylim = range(dt[,idx2])
for (j in J_seq) {
if (calib_res) {
col = rgb(1, 0, 0, 0.4)
} else {
col = rgb(0, 0, 1, 0.4)
}
plot(dt[C==j,idx1],
dt[C==j,idx2],
pch=".",xlab="", ylab="",
xlim = xlim, ylim = ylim, xaxt = "n", yaxt = "n",
col = col)
if (j==1) {
mtext(colnames(Y)[idx2],
side = 2, outer = FALSE, line = 1, cex = 1.2)
}
if (idx2 == IDX2[length(IDX2)]) {
mtext(colnames(Y)[idx1], side = 1, outer = FALSE, line = 1, cex = 1.2)
}
if (idx2 == IDX2[1]) {
mtext(paste0("Sample #", j), side = 3, outer = FALSE, line = 0.8, cex = 1.2)
}
}
}
mtext(title, side = 3, outer = TRUE, line = 2.8, cex = 1.5)
dev.off()
}
}
}
}
set.seed(123)
make_tsne = FALSE
plot_tsne = FALSE
plot_calibrated_batch_control = TRUE
if(!require(COMIX)){
devtools::install_github("MaStatLab/COMIX")
library(COMIX)
}
tps = c("batch_control_fit")
zeta_seq = NULL
K_num = NULL
seed = NULL
dt = readRDS(file = "./batch_control_data.rds")
Y = dt$Y
C = dt$C
for (tp in tps) {
fn = dir(paste0("./", tp))
fn = fn[grepl("zeta", fn)]
for (f in fn) {
try({
rr = readRDS(paste0("./", tp,"/", f))
zeta_seq = c(zeta_seq, rr$zeta)
K_num = rbind(K_num, rr$K_num)
seed = c(seed, rr$seed)
})
}
}
oz = order(zeta_seq)
zeta_seq = zeta_seq[oz]
K_num = K_num[oz, ]
winner_idx = c(1, 2)
zeta_seq[winner_idx]
# Compute tsne and save:
if (make_tsne) {
library(Rtsne)
tt = list()
for (idx in winner_idx) {
print(paste0("zeta = ",zeta_seq[idx]))
rr = readRDS(paste0("./", tp, "/cal_flow_zeta_",
zeta_seq[idx],
".rds"))
tt[[idx]] = list(tsne = Rtsne(rr$Y_cal), zeta = zeta_seq[idx], idx = idx)
}
saveRDS(tt, "./tsne_favorite.rds")
tto = Rtsne(Y)
saveRDS(tto, "./tsne_raw.rds")
} else {
tt = readRDS("./tsne_favorite.rds")
tto = readRDS("./tsne_raw.rds")
}
# Plot some tsne and save:
nj = 10000
if (plot_tsne) {
n_row = length(winner_idx) + 1
J_seq = c(1,2,3)
n_col = length(J_seq)
jpeg(paste0("./Figure_8.jpg"), width=200 * n_col, height = 200 * n_row)
par(mfrow=c(n_row,n_col))
par(mar=c(0.2, 0.2, 0.2, 0.2))
par(oma=c(0, 0, 0, 3))
tt = readRDS("./tsne_favorite.rds")
for (j in J_seq) {
plot(tto$Y[((j - 1) * nj + 1):(j * nj), c(2, 1)],
xlim = rev(range(tto$Y[((j - 1) * nj + 1):(j * nj), 2])),
xaxt = "n", yaxt = "n",
asp = 1, pch = ".", xlab = "", ylab = "")
}
mtext("Raw Data",
side = 4, outer = FALSE, at = grconvertX(0.5,'npc','nic'),
line = 1.5, cex = 1.5)
for (idx in winner_idx) {
rr = readRDS(paste0("./",tp,"/cal_flow_zeta_",
zeta_seq[idx],
".rds"))
ust = unique(rr$sum_chain$t)
post_K = length(ust)
col_range = rainbow(post_K)
ord_lbl = numeric(post_K)
for (z in ust) {
ord_lbl[rr$sum_chain$t == z] = which(z == ust)
}
for (j in J_seq) {
plot(tt[[idx]]$tsne$Y[((j - 1) * nj + 1):(j * nj), ],
asp = 1, pch = ".", xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
col = col_range[ord_lbl[((j - 1) * nj + 1):(j * nj)]])
}
mtext(substitute(paste(zeta, " = ", zt), list(zt = zeta_seq[idx])),
side = 4, outer = FALSE, at = grconvertX(0.5,'npc','nic'),
line = 1.5, cex = 1.5)
}
dev.off()
}
if (plot_calibrated_batch_control) {
for (idx in 1:2) {
rr = readRDS(paste0("./",tp,"/cal_flow_zeta_",
zeta_seq[idx],
".rds"))
ust = unique(rr$sum_chain$t)
post_K = length(ust)
col_range = rainbow(post_K)
ord_lbl = numeric(post_K)
for (z in ust) {
ord_lbl[rr$sum_chain$t == z] = which(z == ust)
}
# Plot margins:
J = length(unique(C))
p = dim(rr$Y_cal)[2]
J_seq = c(1:J)
IDX2 = c(5,15,9)
for (calib_res in c(FALSE, TRUE)) {
for (idx1 in 6) {
if (calib_res) {
fname = paste0("./Figure_9_zeta", zeta_seq[idx], ".pdf")
title = substitute(paste("Calibrated Data, ", zeta, " = ", zt), list(zt = zeta_seq[idx]))
dt = rr$Y_cal
} else {
fname = "./Figure_9_raw.pdf"
title = "Raw Data"
dt = Y
}
pdf(file=fname,
width=2.5*length(J_seq), height=2.5*length(IDX2))
par(mfrow=c(length(IDX2),length(J_seq)))
par(mar=c(.2,.2,.2,.2))
par(oma=c(3, 3.5, 5, 0))
for (idx2 in IDX2) {
xlim = range(dt[,idx1])
ylim = range(dt[,idx2])
for (j in J_seq) {
if (calib_res) {
col = rgb(1, 0, 0, 0.4)
} else {
col = rgb(0, 0, 1, 0.4)
}
plot(dt[C==j,idx1],
dt[C==j,idx2],
pch=".",xlab="", ylab="",
xlim = xlim, ylim = ylim, xaxt = "n", yaxt = "n",
col = col)
if (j==1) {
mtext(colnames(Y)[idx2],
side = 2, outer = FALSE, line = 1, cex = 1.2)
}
if (idx2 == IDX2[length(IDX2)]) {
mtext(colnames(Y)[idx1], side = 1, outer = FALSE, line = 1, cex = 1.2)
}
if (idx2 == IDX2[1]) {
mtext(paste0("Sample #", j), side = 3, outer = FALSE, line = 0.8, cex = 1.2)
}
}
}
mtext(title, side = 3, outer = TRUE, line = 2.8, cex = 1.5)
dev.off()
}
}
}
}
