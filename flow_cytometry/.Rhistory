x.rtt[ , 2] = xxy[ , 1]
x.rtt[ , 3] = xxy[ , 2]
y.rtt[ , 1] = y[ , 1]
y.rtt[ , 2] = y[ , 2]
y.rtt[ , 3] = xxy[ , 3]
par(mfrow = c(3, 3))
par(mgp = c(0, 0, 0))
par(mar = c(1.5, 1.5, 0, 0))
for (i in 1:3) {
for (j in 1:3) {
plot(x.rtt[ , i], y.rtt[ , j], col = "black", pch = 20, xlab = paste0("x", i),
ylab = paste0("y", j), xaxt = "n", yaxt = "n")
}
}
xy.rtt.circ = list(x = x.rtt, y = y.rtt)
par(mar=c(2.5,2.5,2.5,2.5))
# Run first with p_star=0.2:
fit.rtt.circ = multiFit(xy = xy.rtt.circ, R_star = 2, rnd = F, verbose = TRUE)
multiSummary(xy = xy.rtt.circ, fit = fit.rtt.circ, alpha = 0.05)
set.seed(1)
# Generate data for two random vectors, each of dimension 2, 300 observations:
n = 300
x = matrix(0, ncol = 2, nrow = n)
y = matrix(0, ncol = 2, nrow = n)
# x1 and y1 are i.i.d Normal(0,1):
x[ , 1] = rnorm(n)
y[ , 1] = rnorm(n)
# x2 is a Uniform(0,1):
x[ , 2] = runif(n)
# and y2 is depends on x2 as a noisy sine function:
y[ , 2] = sin(5 * pi * x[ , 2]) + 0.6 * rnorm(n)
plot(x[ , 1], y[ , 1], col = "grey", pch = "x", xlab = "x1", ylab = "y1")
plot(x[ , 1], y[ , 2], col = "grey", pch = "x", xlab = "x1", ylab = "y2")
plot(x[ , 2], y[ , 1], col = "grey", pch = "x", xlab = "x2", ylab = "y1")
plot(x[ , 2], y[ , 2], col = "grey", pch = "x", xlab = "x2", ylab = "y2")
library(MultiFit)
fit = multiFit(x = x, y = y)
fit$p.values
# Data may also be transferred to the function as a single list:
xy = list(x = x, y = y)
fit = multiFit(xy, verbose = TRUE)
multiSummary(xy = xy, fit = fit, alpha = 0.05)
# And plot a DAG representation of the ranked tests:
library(png)
library(qgraph)
multiTree(xy = xy, fit = fit, filename = "first_example")
fit1 = multiFit(xy, p_star = 0.1, verbose = TRUE)
multiSummary(xy = xy, fit = fit1, alpha = 0.005, plot.tests = FALSE)
# 1. set p_star=Inf, running through all tables up to the maximal resolution
# which by default is set to log2(n/100):
#ex1 = multiFit(xy, p_star = 1)
# 2. set both p_star=1 and the maximal resolution R_max=Inf.
# In this case, the algorithm will scan through higher and higher resolutions,
# until there are no more tables that satisfy the minimum requirements for
# marginal totals: min.tbl.tot, min.row.tot and min.col.tot (whose default values
# are presented below):
#ex2 = multiFit(xy, p_star = 1, R_max=Inf,
#               min.tbl.tot = 25L, min.row.tot = 10L, min.col.tot = 10L)
# 3. set smaller minimal marginal totals, that will result in testing
# even more tables in higher resolutions:
#ex3 = multiFit(xy, p_star = 1, R_max=Inf,
#               min.tbl.tot = 10L, min.row.tot = 4L, min.col.tot = 4L)
# Generate data for two random vectors, each of dimension 2, 800 observations:
n = 800
x = matrix(0, ncol=2, nrow=n)
y = matrix(0, ncol=2, nrow=n)
# x1, x2 and y1 are i.i.d Normal(0,1):
x[,1] = rnorm(n)
x[,2] = rnorm(n)
y[,1] = rnorm(n)
# y2 is i.i.d Normal(0,1) on most of the space:
y[,2] = rnorm(n)
# But is linearly dependent on x2 in a small portion of the space:
w=rnorm(n)
portion.of.space = x[,2] > 0 & x[,2] < 0.7 & y[,2] > 0 & y[,2] < 0.7
y[portion.of.space,2] = x[portion.of.space, 2] + (1/12) * w[portion.of.space]
xy.local = list(x = x, y = y)
fit.local = multiFit(xy = xy.local, R_star = 4, verbose=TRUE)
multiSummary(xy = xy.local, fit = fit.local, plot.margin = TRUE, pch = "`")
# Marginal signal:
# Generate data for two random vectors, each of dimension 3, 800 observations:
n = 800
x = matrix(0, ncol = 3, nrow = n)
y = matrix(0, ncol = 3, nrow = n)
# x1, x2, y1 and y2 are all i.i.d Normal(0,1)
x[ , 1] = rnorm(n)
x[ , 2] = rnorm(n)
y[ , 1] = rnorm(n)
y[ , 2] = rnorm(n)
# x3 and y3 form a noisy circle:
theta = runif(n, -pi, pi)
x[ , 3] = cos(theta) + 0.1 * rnorm(n)
y[ , 3] = sin(theta) + 0.1 * rnorm(n)
par(mfrow = c(3, 3))
par(mgp = c(0, 0, 0))
par(mar = c(1.5, 1.5, 0, 0))
for (i in 1:3) {
for (j in 1:3) {
plot(x[ , i], y[ , j], col = "black", pch = 20, xlab = paste0("x", i), ylab = paste0("y", j),
xaxt = "n", yaxt = "n")
}
}
phi = pi / 4
rot.mat = matrix(c(cos(phi), -sin(phi),  0,
sin(phi),  cos(phi),  0,
0,         0,         1),
nrow = 3,
ncol = 3)
xxy = t(rot.mat %*% t(cbind(x[ , 2], x[ , 3], y[ , 3])))
x.rtt = matrix(0, ncol = 3, nrow = n)
y.rtt = matrix(0, ncol = 3, nrow = n)
x.rtt[ , 1] = x[ , 1]
x.rtt[ , 2] = xxy[ , 1]
x.rtt[ , 3] = xxy[ , 2]
y.rtt[ , 1] = y[ , 1]
y.rtt[ , 2] = y[ , 2]
y.rtt[ , 3] = xxy[ , 3]
par(mfrow = c(3, 3))
par(mgp = c(0, 0, 0))
par(mar = c(1.5, 1.5, 0, 0))
for (i in 1:3) {
for (j in 1:3) {
plot(x.rtt[ , i], y.rtt[ , j], col = "black", pch = 20, xlab = paste0("x", i),
ylab = paste0("y", j), xaxt = "n", yaxt = "n")
}
}
xy.rtt.circ = list(x = x.rtt, y = y.rtt)
fit.rtt.circ = multiFit(xy = xy.rtt.circ, R_star = 2, rnd = F, verbose = TRUE)
set.seed(1)
# Generate data for two random vectors, each of dimension 2, 300 observations:
n = 300
x = matrix(0, ncol = 2, nrow = n)
y = matrix(0, ncol = 2, nrow = n)
# x1 and y1 are i.i.d Normal(0,1):
x[ , 1] = rnorm(n)
y[ , 1] = rnorm(n)
# x2 is a Uniform(0,1):
x[ , 2] = runif(n)
# and y2 is depends on x2 as a noisy sine function:
y[ , 2] = sin(5 * pi * x[ , 2]) + 0.6 * rnorm(n)
plot(x[ , 1], y[ , 1], col = "grey", pch = "x", xlab = "x1", ylab = "y1")
plot(x[ , 1], y[ , 2], col = "grey", pch = "x", xlab = "x1", ylab = "y2")
plot(x[ , 2], y[ , 1], col = "grey", pch = "x", xlab = "x2", ylab = "y1")
plot(x[ , 2], y[ , 2], col = "grey", pch = "x", xlab = "x2", ylab = "y2")
library(MultiFit)
fit = multiFit(x = x, y = y)
fit$p.values
# Data may also be transferred to the function as a single list:
xy = list(x = x, y = y)
fit = multiFit(xy, verbose = TRUE)
multiSummary(xy = xy, fit = fit, alpha = 0.05)
# And plot a DAG representation of the ranked tests:
library(png)
library(qgraph)
multiTree(xy = xy, fit = fit, filename = "first_example")
fit1 = multiFit(xy, p_star = 0.1, verbose = TRUE)
multiSummary(xy = xy, fit = fit1, alpha = 0.005, plot.tests = FALSE)
# 1. set p_star=Inf, running through all tables up to the maximal resolution
# which by default is set to log2(n/100):
#ex1 = multiFit(xy, p_star = 1)
# 2. set both p_star=1 and the maximal resolution R_max=Inf.
# In this case, the algorithm will scan through higher and higher resolutions,
# until there are no more tables that satisfy the minimum requirements for
# marginal totals: min.tbl.tot, min.row.tot and min.col.tot (whose default values
# are presented below):
#ex2 = multiFit(xy, p_star = 1, R_max=Inf,
#               min.tbl.tot = 25L, min.row.tot = 10L, min.col.tot = 10L)
# 3. set smaller minimal marginal totals, that will result in testing
# even more tables in higher resolutions:
#ex3 = multiFit(xy, p_star = 1, R_max=Inf,
#               min.tbl.tot = 10L, min.row.tot = 4L, min.col.tot = 4L)
# Generate data for two random vectors, each of dimension 2, 800 observations:
n = 800
x = matrix(0, ncol=2, nrow=n)
y = matrix(0, ncol=2, nrow=n)
# x1, x2 and y1 are i.i.d Normal(0,1):
x[,1] = rnorm(n)
x[,2] = rnorm(n)
y[,1] = rnorm(n)
# y2 is i.i.d Normal(0,1) on most of the space:
y[,2] = rnorm(n)
# But is linearly dependent on x2 in a small portion of the space:
w=rnorm(n)
portion.of.space = x[,2] > 0 & x[,2] < 0.7 & y[,2] > 0 & y[,2] < 0.7
y[portion.of.space,2] = x[portion.of.space, 2] + (1/12) * w[portion.of.space]
xy.local = list(x = x, y = y)
fit.local = multiFit(xy = xy.local, R_star = 4, verbose=TRUE)
multiSummary(xy = xy.local, fit = fit.local, plot.margin = TRUE, pch = "`")
# Marginal signal:
# Generate data for two random vectors, each of dimension 3, 800 observations:
n = 800
x = matrix(0, ncol = 3, nrow = n)
y = matrix(0, ncol = 3, nrow = n)
# x1, x2, y1 and y2 are all i.i.d Normal(0,1)
x[ , 1] = rnorm(n)
x[ , 2] = rnorm(n)
y[ , 1] = rnorm(n)
y[ , 2] = rnorm(n)
# x3 and y3 form a noisy circle:
theta = runif(n, -pi, pi)
x[ , 3] = cos(theta) + 0.1 * rnorm(n)
y[ , 3] = sin(theta) + 0.1 * rnorm(n)
par(mfrow = c(3, 3))
par(mgp = c(0, 0, 0))
par(mar = c(1.5, 1.5, 0, 0))
for (i in 1:3) {
for (j in 1:3) {
plot(x[ , i], y[ , j], col = "black", pch = 20, xlab = paste0("x", i), ylab = paste0("y", j),
xaxt = "n", yaxt = "n")
}
}
phi = pi / 4
rot.mat = matrix(c(cos(phi), -sin(phi),  0,
sin(phi),  cos(phi),  0,
0,         0,         1),
nrow = 3,
ncol = 3)
xxy = t(rot.mat %*% t(cbind(x[ , 2], x[ , 3], y[ , 3])))
x.rtt = matrix(0, ncol = 3, nrow = n)
y.rtt = matrix(0, ncol = 3, nrow = n)
x.rtt[ , 1] = x[ , 1]
x.rtt[ , 2] = xxy[ , 1]
x.rtt[ , 3] = xxy[ , 2]
y.rtt[ , 1] = y[ , 1]
y.rtt[ , 2] = y[ , 2]
y.rtt[ , 3] = xxy[ , 3]
par(mfrow = c(3, 3))
par(mgp = c(0, 0, 0))
par(mar = c(1.5, 1.5, 0, 0))
for (i in 1:3) {
for (j in 1:3) {
plot(x.rtt[ , i], y.rtt[ , j], col = "black", pch = 20, xlab = paste0("x", i),
ylab = paste0("y", j), xaxt = "n", yaxt = "n")
}
}
xy.rtt.circ = list(x = x.rtt, y = y.rtt)
fit.rtt.circ = multiFit(xy = xy.rtt.circ, R_star = 2, verbose = TRUE)
library(MinimalRcppCuda)
MinimalRcppCuda::cudaTest()
MinimalRcppCuda::cudaTest()
cudaTest()
a = cudaTest()
str(a)
a[[1]]
a[[2]]
a[[3]]
a[[4]]
install.packages("COMIX", repos = "https://github.com/mastatlab/COMIX")
install.packages("COMIX", repos = "https://github.com/MaStatLab/COMIX")
devtools::install_github("MaStatLab/COMIX")
smpl = rnorm(S)
S = 10000
smpl = rnorm(S)
xx = smpl[smpl >= 1 & smpl <=2]
mean(xx)
xx/10000
sum(xx/10000)
mean(xx)
xx = smpl >= 1 & smpl <=2
mean(xx)
S = 100000
smpl = rnorm(S)
xx = smpl >= 1 & smpl <=2
mean(xx)
S = 1000000
smpl = rnorm(S)
xx = smpl >= 1 & smpl <=2
mean(xx)
sum(xx)/S
S = 1000000
smpl = rnorm(S)
xx = smpl >= 1 & smpl <=2
sum(xx)/S
w <- function(x) {
a = 1 / dnorm(x)
if (1<=a & a<=2) return(a) else return(0)
}
(1/S) * sum(smpl2 * w(smpl2))
smpl2 = rnorm(S)
w <- function(x) {
a = 1 / dnorm(x)
if (1<=a & a<=2) return(a) else return(0)
}
(1/S) * sum(smpl2 * w(smpl2))
w <- function(x) {
(1<=a & a<=2) / dnorm(x)
}
(1/S) * sum(smpl2 * w(smpl2))
w <- function(x) {
(1<=x & x<=2) / dnorm(x)
}
(1/S) * sum(smpl2 * w(smpl2))
S = 10000000
smpl2 = rnorm(S)
w <- function(x) {
(1<=x & x<=2) / dnorm(x)
}
(1/S) * sum(smpl2 * w(smpl2))
S = 1000000
smpl2 = rnorm(S)
w <- function(x) {
(1<=x & x<=2) * dnorm(x)
}
(1/S) * sum(smpl2 * w(smpl2))
W = numeric(S)
for (s in 1:S) {
W[s] = w(smpl2[s])
}
(1/S) * sum(smpl2 * W)
(1/S) * sum(W)
smpl2
W
S = 100000
smpl2 = runif(S)
smpl2 = runif(S) + 1
smpl2
S = 100000
smpl2 = runif(S) + 1
mean(smpl2 * dnrom(smpl2))
mean(smpl2 * dnorm(smpl2))
S = 1000000
smpl2 = runif(S) + 1
mean(smpl2 * dnorm(smpl2))
mean(norm(smpl2))
mean(dnorm(smpl2))
installed.packages("sn")
install.packages("sn")
remove.packages("MPSK", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
remove.packages("MPSKt", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
set.seed(123)
make_tsne = F
plot_tsne = TRUE
plot_marginal_densities = TRUE
if(!require(COMIX)){
devtools::install_github("MaStatLab/COMIX")
library(COMIX)
}
tps = c("batch_control_fit")
zeta_seq = NULL
K_num = NULL
seed = NULL
dt = readRDS(file = "./batch_control_data.rds")
setwd("/home/hhh/projects/MPSK/MPSK_writeup/JASA_AandCS/Numerical_Examples/flow_cytometry")
set.seed(123)
make_tsne = F
plot_tsne = TRUE
plot_marginal_densities = TRUE
if(!require(COMIX)){
devtools::install_github("MaStatLab/COMIX")
library(COMIX)
}
tps = c("batch_control_fit")
zeta_seq = NULL
K_num = NULL
seed = NULL
dt = readRDS(file = "./batch_control_data.rds")
Y = dt$Y
C = dt$C
for (tp in tps) {
fn = dir(paste0("./", tp))
fn = fn[grepl("zeta", fn)]
for (f in fn) {
try({
rr = readRDS(paste0("./", tp,"/", f))
zeta_seq = c(zeta_seq, rr$zeta)
K_num = rbind(K_num, rr$K_num)
seed = c(seed, rr$seed)
})
}
}
oz = order(zeta_seq)
zeta_seq = zeta_seq[oz]
K_num = K_num[oz, ]
# Table S1:
capture.output(
{
tbl_s1 = cbind(zeta_seq, K_num)
colnames(tbl_s1) = c("zeta", paste0("#", 1:10))
knitr::kable(tbl_s1)
},
file = "./TableS1.txt"
)
winner_idx = c(2, 10)
# Compute tsne and save:
if (make_tsne) {
library(Rtsne)
tt = list()
for (idx in winner_idx) {
print(paste0("zeta = ", zeta_seq[idx]))
rr =
readRDS(
paste0("./", tp, "/cal_flow_zeta_", zeta_seq[idx], ".rds")
)
tt[[idx]] = list(tsne = Rtsne(rr$Y_cal), zeta = zeta_seq[idx], idx = idx)
}
saveRDS(tt, "./tsne_favorite.rds")
tto = Rtsne(Y)
saveRDS(tto, "./tsne_raw.rds")
} else {
tt = readRDS("./tsne_favorite.rds")
tto = readRDS("./tsne_raw.rds")
}
# Plot some tsne and save:
nj = 10000
if (plot_tsne) {
n_row = length(winner_idx) + 1
J_seq = 1:10
n_col = length(J_seq)
jpeg(paste0("./Figure_6.jpg"), width = 200 * n_col, height = 200 * n_row)
par(mfrow = c(n_row, n_col))
par(mar = c(0.2, 0.2, 0.2, 0.2))
par(oma = c(0, 0, 0, 3))
tt = readRDS("./tsne_favorite.rds")
for (j in J_seq) {
plot(tto$Y[((j - 1) * nj + 1):(j * nj), c(2, 1)],
xlim = rev(range(tto$Y[((j - 1) * nj + 1):(j * nj), 2])),
xaxt = "n", yaxt = "n",
asp = 1, pch = ".", xlab = "", ylab = "")
}
mtext("Raw Data", side = 4, outer = FALSE, at = grconvertX(0.5,'npc','nic'), line = 1.5, cex = 1.5)
for (idx in winner_idx) {
rr = readRDS(paste0("./",tp,"/cal_flow_zeta_",
zeta_seq[idx],
".rds"))
ust = unique(rr$sum_chain$t)
post_K = length(ust)
col_range = rainbow(post_K)
ord_lbl = numeric(post_K)
for (z in ust) {
ord_lbl[rr$sum_chain$t == z] = which(z == ust)
}
for (j in J_seq) {
plot(
tt[[idx]]$tsne$Y[((j - 1) * nj + 1):(j * nj), ],
asp = 1,
pch = ".", xlab = "", ylab = "",
xaxt = "n", yaxt = "n",
col = col_range[ord_lbl[((j - 1) * nj + 1):(j * nj)]])
}
mtext(substitute(paste(zeta, " = ", zt), list(zt = zeta_seq[idx])),
side = 4, outer = FALSE, at = grconvertX(0.5, 'npc', 'nic'),
line = 1.5, cex = 1.5)
}
dev.off()
}
file_names = c("Figure_7.pdf", "Figure_S1.pdf", "Figure_S2.pdf")
winner_idx = list(c(2, 10), 1:5, 6:10)
if (plot_marginal_densities) {
for (b in 1:3) {
GP = list()
i = 1
pdf(
file_names[b],
width = 2 * 6,
height = 2 * (length(winner_idx[[b]]) + 1)
)
dt = Y
title = "Marginal density plots of raw data:"
nrow = nrow(dt) * ncol(dt)
markers = colnames(dt)
dat = data.frame(value = c(dt),
marker = rep(markers, each = nrow(dt)),
sample = rep(paste("Sample", C), ncol(dt)))
library(ggplot2)
library(ggridges)
gp =
ggplot(dat, aes(x = value, y = sample, fill = sample)) +
geom_density_ridges(scale = 3) +
scale_y_discrete(expand=c(0.01, 0)) +
scale_x_continuous(expand=c(0.01, 0)) +
facet_grid(. ~ marker, scales = "free_x") +
theme_bw() +
theme(legend.position = "none") +
labs(y = "", x = "", title = title)
options(repr.plot.width = 10, repr.plot.height = 10)
GP[[i]] = gp
i = i + 1
for (idx in winner_idx[[b]]) {
rr = readRDS(paste0("./",tp,"/cal_flow_zeta_",
zeta_seq[idx],
".rds"))
dt = rr$Y_cal
if (which(idx == winner_idx[[b]]) == 1) {
title = "Marginal density plots of calibrated data:"
} else {
title = ""
}
nrow = nrow(dt) * ncol(dt)
markers = colnames(dt)
dat = data.frame(value = c(dt),
marker = rep(markers, each = nrow(dt)),
sample = rep(paste("Sample", C), ncol(dt)))
library(ggplot2)
library(ggridges)
gp =
ggplot(dat, aes(x = value, y = sample, fill = sample)) +
geom_density_ridges(scale = 3) +
scale_y_discrete(expand=c(0.01, 0)) +
scale_x_continuous(expand=c(0.01, 0)) +
facet_grid(. ~ marker, scales = "free_x") +
theme_bw() +
theme(legend.position = "none") +
labs(y = substitute(paste(zeta, " = ", zt), list(zt = zeta_seq[idx])), x = "", title = title)
options(repr.plot.width = 10, repr.plot.height = 10)
GP[[i]] = gp
i = i + 1
}
library(gridExtra)
do.call("grid.arrange", c(GP, ncol = 1))
dev.off()
}
}
